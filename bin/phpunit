#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

# Import our utilities.
. bin/utilities.sh

COVERAGE_REPORT=0
if [ "${1:-0}" = "--coverage-report" ]; then
  COVERAGE_REPORT=1

  # Remove/unset --coverage-report arg.
  set -- "${@:1:$(($#-1))}"
fi

# Ensure we are in the correct cwd.
DIR=$(cd `dirname $0` && cd .. && pwd)
cd $DIR

# Check if docker container is already spin up and save the value to use below.
DB_PHPUNIT_DPS=$(docker-compose -f docker-compose.phpunit.yml ps -q mysql_phpunit)

# Spin up testing Docker containers only if the container is not running.
if [ -z "$DB_PHPUNIT_DPS" ] || [ -z `docker ps -q --no-trunc | grep $DB_PHPUNIT_DPS` ]; then
  print_message "ðŸ’¬ Spinning up testing docker containers."
  docker-compose -f docker-compose.phpunit.yml up -d --build & PID=$!
  wait $PID
  docker-compose -f docker-compose.phpunit.yml images
  print_message "ðŸ’¬ Waiting for mysql service initialisation..."
  sleep 10;
fi

# Install WordPress Tests.
docker-compose -f docker-compose.phpunit.yml run --rm wordpress_phpunit /var/www/app/bin/install-wp-tests.sh wordpress_tests root "" mysql_phpunit

# Run WP Tests
if [ $COVERAGE_REPORT = 1 ]; then
  print_message "ðŸ’¬ Running PHPUnit Tests With Generating Coverage report..."
  docker-compose -f docker-compose.phpunit.yml -f docker-compose.xdebug.yml run --rm wordpress_phpunit \
		phpunit -c /var/www/app/phpunit.xml.dist --coverage-html=/var/www/app/tests/coverage/html --debug --verbose $@

	print_message "ðŸ’¬ Coverage report is generated inside tests/coverage/ dir..."
else
  print_message "ðŸ’¬ Running PHPUnit Tests..."
  docker-compose -f docker-compose.phpunit.yml run --rm wordpress_phpunit \
		phpunit -c /var/www/app/phpunit.xml.dist $@
fi;
